# ============================================
# DOCKER COMPOSE - WORKSHOP LANGCHAIN + MCP + QDRANT
# ============================================
# Ambiente completo containerizado para o workshop
# Execute: docker compose up -d

services:
  # ==========================================
  # PYTHON APP - Ambiente de desenvolvimento
  # ==========================================
  workshop-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: workshop-app
    volumes:
      - .:/app
      - workshop_cache:/home/workshop/.cache
    environment:
      # Carrega variáveis do arquivo .env
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    depends_on:
      - qdrant
      - redis
    networks:
      - workshop-network
    # Mantém container rodando para desenvolvimento
    command: ["sleep", "infinity"]
    tty: true
    stdin_open: true
  # ==========================================
  # QDRANT - Vector Database
  # ==========================================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: workshop-qdrant
    ports:
      - "6333:6333"     # API REST
      - "6334:6334"     # gRPC (opcional)
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      # Configurações básicas para desenvolvimento
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Desabilita autenticação para desenvolvimento local
      QDRANT__SERVICE__ENABLE_CORS: true
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 15s
    restart: unless-stopped
    networks:
      - workshop-network

  # ==========================================
  # REDIS - Cache e Sessões
  # ==========================================
  # Comente este serviço se não quiser usar Redis
  redis:
    image: redis:7-alpine
    container_name: workshop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      # Configurações de desenvolvimento
      REDIS_PASSWORD: ""
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - workshop-network

# ==========================================
# VOLUMES PERSISTENTES
# ==========================================
volumes:
  # Dados do Qdrant (coleções, índices, embeddings)
  qdrant_storage:
    driver: local
    name: workshop-qdrant-storage
  
  # Dados do Redis (cache, sessões)
  redis_data:
    driver: local
    name: workshop-redis-data
  
  # Cache Python (pip, poetry, etc.)
  workshop_cache:
    driver: local
    name: workshop-python-cache

# ==========================================
# REDE INTERNA
# ==========================================
networks:
  workshop-network:
    driver: bridge
    name: workshop-network

# ==========================================
# COMANDOS ÚTEIS
# ==========================================
# Iniciar ambiente:      docker compose up -d
# Ver logs:              docker compose logs -f
# Parar serviços:        docker compose down
# Resetar dados:         docker compose down -v
# Status dos serviços:   docker compose ps
# Executar comandos:     docker compose exec workshop-app python script.py
# Shell no container:    docker compose exec workshop-app bash
#
# URLs de acesso:
# - Qdrant Dashboard:    http://localhost:6333/dashboard
# - Qdrant API:          http://localhost:6333
# - Redis CLI:           docker compose exec redis redis-cli
#
# Verificação do ambiente:
# docker compose exec workshop-app python -m scripts.check_env
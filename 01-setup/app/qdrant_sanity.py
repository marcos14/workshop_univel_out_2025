"""
Testes de sanidade para Qdrant (Vector Database).

Este m√≥dulo verifica se a conex√£o com o Qdrant est√° funcionando corretamente,
testando conectividade, listagem de cole√ß√µes e opera√ß√µes b√°sicas.
"""

import traceback
from typing import Dict, Any, List

from app.config import get_settings

try:
    from qdrant_client import QdrantClient
    from qdrant_client.http.exceptions import UnexpectedResponse
    QDRANT_AVAILABLE = True
except ImportError:
    QDRANT_AVAILABLE = False


def check_connection() -> Dict[str, Any]:
    """
    Verifica a conectividade b√°sica com o Qdrant.
    
    Tenta conectar e listar cole√ß√µes existentes.
    
    Returns:
        Dict[str, Any]: Resultado do teste com status e detalhes
    """
    settings = get_settings()
    
    # Verifica se qdrant-client est√° dispon√≠vel
    if not QDRANT_AVAILABLE:
        return {
            "status": "fail",
            "message": "qdrant-client n√£o est√° instalado",
            "details": "Execute: poetry install",
            "error": "ImportError: qdrant_client"
        }
    
    try:
        # Cria cliente Qdrant
        client = QdrantClient(
            url=settings.QDRANT_URL,
            api_key=settings.QDRANT_API_KEY if settings.has_qdrant_key else None,
            timeout=settings.REQUEST_TIMEOUT
        )
        
        # Testa conectividade listando cole√ß√µes
        collections = client.get_collections()
        collection_names = [col.name for col in collections.collections]
        
        return {
            "status": "ok",
            "message": "Conectado ao Qdrant com sucesso",
            "details": f"URL: {settings.QDRANT_URL} | Cole√ß√µes: {len(collection_names)}",
            "error": None,
            "collections": collection_names,
            "total_collections": len(collection_names)
        }
        
    except Exception as e:
        error_msg = str(e)
        
        # Trata erros espec√≠ficos do Qdrant
        if "connection" in error_msg.lower() or "refused" in error_msg.lower():
            return {
                "status": "fail",
                "message": "N√£o foi poss√≠vel conectar ao Qdrant",
                "details": f"Verifique se o servi√ßo est√° rodando: docker compose up -d",
                "error": error_msg,
                "suggestion": "Execute: make up"
            }
        elif "timeout" in error_msg.lower():
            return {
                "status": "fail",
                "message": "Timeout na conex√£o com Qdrant",
                "details": "O Qdrant pode estar inicializando. Aguarde alguns segundos.",
                "error": error_msg
            }
        elif "authentication" in error_msg.lower() or "401" in error_msg:
            return {
                "status": "fail",
                "message": "Erro de autentica√ß√£o com Qdrant",
                "details": "Verifique a QDRANT_API_KEY no arquivo .env",
                "error": error_msg
            }
        elif "404" in error_msg or "not found" in error_msg.lower():
            return {
                "status": "fail",
                "message": "Qdrant n√£o encontrado na URL configurada",
                "details": f"Verifique QDRANT_URL: {settings.QDRANT_URL}",
                "error": error_msg
            }
        else:
            return {
                "status": "fail",
                "message": "Erro inesperado ao conectar com Qdrant",
                "details": f"Erro: {error_msg}",
                "error": error_msg,
                "traceback": traceback.format_exc()
            }


def check_health() -> Dict[str, Any]:
    """
    Verifica o status de sa√∫de do Qdrant.
    
    Returns:
        Dict[str, Any]: Informa√ß√µes detalhadas sobre o estado do Qdrant
    """
    settings = get_settings()
    
    if not QDRANT_AVAILABLE:
        return {
            "status": "fail",
            "message": "qdrant-client n√£o dispon√≠vel"
        }
    
    try:
        client = QdrantClient(
            url=settings.QDRANT_URL,
            api_key=settings.QDRANT_API_KEY if settings.has_qdrant_key else None,
            timeout=settings.REQUEST_TIMEOUT
        )
        
        # Obt√©m informa√ß√µes sobre as cole√ß√µes
        collections = client.get_collections()
        
        # Obt√©m informa√ß√µes sobre cada cole√ß√£o
        collection_details = []
        for collection in collections.collections:
            try:
                info = client.get_collection(collection.name)
                collection_details.append({
                    "name": collection.name,
                    "vectors_count": info.vectors_count,
                    "indexed_vectors_count": info.indexed_vectors_count,
                    "points_count": info.points_count,
                    "status": info.status
                })
            except Exception as e:
                collection_details.append({
                    "name": collection.name,
                    "error": str(e)
                })
        
        return {
            "status": "ok",
            "message": "Qdrant operacional",
            "details": f"Servidor funcionando com {len(collections.collections)} cole√ß√µes",
            "collections": collection_details,
            "total_collections": len(collections.collections)
        }
        
    except Exception as e:
        return {
            "status": "fail",
            "message": "Erro ao verificar sa√∫de do Qdrant",
            "error": str(e)
        }


def test_basic_operations() -> Dict[str, Any]:
    """
    Testa opera√ß√µes b√°sicas do Qdrant (criar/deletar cole√ß√£o de teste).
    
    Returns:
        Dict[str, Any]: Resultado dos testes de opera√ß√µes b√°sicas
    """
    settings = get_settings()
    test_collection = "workshop_test_collection"
    
    if not QDRANT_AVAILABLE:
        return {
            "status": "skipped",
            "message": "qdrant-client n√£o dispon√≠vel"
        }
    
    try:
        client = QdrantClient(
            url=settings.QDRANT_URL,
            api_key=settings.QDRANT_API_KEY if settings.has_qdrant_key else None,
            timeout=settings.REQUEST_TIMEOUT
        )
        
        operations_log = []
        
        # Limpa cole√ß√£o de teste se existir
        try:
            client.delete_collection(test_collection)
            operations_log.append("‚úÖ Limpeza de cole√ß√£o existente")
        except:
            operations_log.append("‚ÑπÔ∏è  Nenhuma cole√ß√£o anterior para limpar")
        
        # Cria cole√ß√£o de teste
        try:
            from qdrant_client.models import Distance, VectorParams
            
            client.create_collection(
                collection_name=test_collection,
                vectors_config=VectorParams(size=4, distance=Distance.COSINE)
            )
            operations_log.append("‚úÖ Cria√ß√£o de cole√ß√£o")
        except Exception as e:
            operations_log.append(f"‚ùå Falha na cria√ß√£o: {str(e)}")
            raise
        
        # Verifica se a cole√ß√£o foi criada
        try:
            info = client.get_collection(test_collection)
            operations_log.append(f"‚úÖ Verifica√ß√£o da cole√ß√£o: {info.status}")
        except Exception as e:
            operations_log.append(f"‚ùå Falha na verifica√ß√£o: {str(e)}")
            raise
        
        # Remove cole√ß√£o de teste
        try:
            client.delete_collection(test_collection)
            operations_log.append("‚úÖ Remo√ß√£o da cole√ß√£o de teste")
        except Exception as e:
            operations_log.append(f"‚ö†Ô∏è Falha na remo√ß√£o: {str(e)}")
        
        return {
            "status": "ok",
            "message": "Opera√ß√µes b√°sicas funcionando",
            "operations": operations_log,
            "details": "Cria√ß√£o, verifica√ß√£o e remo√ß√£o de cole√ß√£o bem-sucedidas"
        }
        
    except Exception as e:
        return {
            "status": "fail",
            "message": "Falha nas opera√ß√µes b√°sicas",
            "operations": operations_log,
            "error": str(e)
        }


if __name__ == "__main__":
    """Execu√ß√£o direta para teste r√°pido."""
    print("üóÉÔ∏è  Testando conectividade com Qdrant...")
    print()
    
    # Teste de conex√£o
    result = check_connection()
    
    print(f"Status: {result['status']}")
    print(f"Mensagem: {result['message']}")
    print(f"Detalhes: {result['details']}")
    
    if result['status'] == 'ok':
        print(f"Cole√ß√µes encontradas: {result['collections']}")
    
    if result['error']:
        print(f"Erro: {result['error']}")
        if 'suggestion' in result:
            print(f"Sugest√£o: {result['suggestion']}")
    
    print()
    
    # Teste de sa√∫de se a conex√£o passou
    if result['status'] == 'ok':
        print("üè• Verificando sa√∫de do Qdrant...")
        health_result = check_health()
        
        print(f"Status: {health_result['status']}")
        print(f"Mensagem: {health_result['message']}")
        
        if 'collections' in health_result:
            for col in health_result['collections']:
                if 'error' not in col:
                    print(f"   üìÅ {col['name']}: {col['points_count']} pontos")
                else:
                    print(f"   ‚ùå {col['name']}: {col['error']}")
        
        print()
        
        # Teste de opera√ß√µes b√°sicas
        print("‚öôÔ∏è  Testando opera√ß√µes b√°sicas...")
        ops_result = test_basic_operations()
        
        print(f"Status: {ops_result['status']}")
        print(f"Mensagem: {ops_result['message']}")
        
        if 'operations' in ops_result:
            for op in ops_result['operations']:
                print(f"   {op}")
    
    print("\n" + "="*50)